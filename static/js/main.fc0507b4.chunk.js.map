{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","response","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","map","gifListItem","userAddress","upvoteGif","gifIndex","downvoteGif","tipUser","transaction","Transaction","add","transfer","fromPubkey","toPubkey","lamports","LAMPORTS_PER_SOL","send","signature","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","item","index","src","gifLink","score","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc0507b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport kp from \"./keypair.json\";\nimport idl from \"./idl.json\";\nimport \"./App.css\";\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n           */\n          const { publicKey } = await solana.connect({ onlyIfTrusted: true });\n          console.log(\"Connected with Public Key:\", publicKey.toString());\n\n          setWalletAddress(publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(\n        account.gifList.map((gifListItem) => ({\n          ...gifListItem,\n          userAddress: new PublicKey(account.gifList[0].userAddress).toString(),\n        }))\n      );\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const upvoteGif = async (gifIndex) => {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.upvoteGif(gifIndex, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n      },\n    });\n    await getGifList();\n  };\n\n  const downvoteGif = async (gifIndex) => {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.downvoteGif(gifIndex, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n      },\n    });\n    await getGifList();\n  };\n\n  const tipUser = async (userAddress) => {\n    const provider = getProvider();\n\n    const transaction = new web3.Transaction().add(\n      web3.SystemProgram.transfer({\n        fromPubkey: new PublicKey(walletAddress),\n        toPubkey: new PublicKey(userAddress),\n        lamports: web3.LAMPORTS_PER_SOL / 100,\n      })\n    );\n\n    const signature = await provider.send(transaction);\n\n    console.log(\"Transaction Signature\", signature);\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress ? (\n            <button\n              className=\"cta-button connect-wallet-button\"\n              onClick={connectWallet}\n            >\n              Connect to Wallet\n            </button>\n          ) : gifList === null ? (\n            <div className=\"connected-container\">\n              <button\n                className=\"cta-button submit-gif-button\"\n                onClick={createGifAccount}\n              >\n                Do One-Time Initialization For GIF Program Account\n              </button>\n            </div>\n          ) : (\n            <div className=\"connected-container\">\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  sendGif();\n                }}\n              >\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter gif link!\"\n                  value={inputValue}\n                  onChange={({ target }) => setInputValue(target.value)}\n                />\n                <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                  Submit\n                </button>\n              </form>\n              <div className=\"gif-grid\">\n                {gifList.map((item, index) => (\n                  <div className=\"gif-item\" key={index}>\n                    <img src={item.gifLink} />\n                    <div>\n                      <button onClick={() => upvoteGif(index)}>UP</button>\n                      <span>{item.score}</span>\n                      <button onClick={() => downvoteGif(index)}>DOWN</button>\n                    </div>\n                    <div>\n                      <span>{item.userAddress}</span>\n                      <button onClick={() => tipUser(item.userAddress)}>\n                        TIP\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}